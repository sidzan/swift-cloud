generator client {
  provider             = "prisma-client-js"
  experimentalFeatures = ["joinRelations"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id          String       @id @default(uuid())
  title       String
  album       Album?       @relation(fields: [albumId], references: [id])
  albumId     String?
  year        String
  plays       Plays[]
  artists     SongArtist[]
  songWriters SongWriter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongArtist {
  id       String     @id @default(uuid())
  song     Song       @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId   String
  artist   Artist     @relation(fields: [artistId], references: [id])
  artistId String
  role     ArtistRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, artistId])
}

enum ArtistRole {
  PRIMARY
  FEATURED
}

model Artist {
  id    String       @id @default(uuid())
  name  String       @unique
  songs SongArtist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Album     Album[]
}

model Album {
  id       String @id @default(uuid())
  title    String
  year     Int
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
  songs    Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Writer {
  id          String       @id @default(uuid())
  name        String       @unique
  songWriters SongWriter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SongWriter {
  id       String @id @default(uuid())
  song     Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId   String
  writer   Writer @relation(fields: [writerId], references: [id], onDelete: Cascade)
  writerId String

  @@unique([songId, writerId])
}

model Plays {
  id     String @id @default(uuid())
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String
  month  Int
  year   Int
  count  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, month, year])
}
